intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.
#import xxxx_libs += libhello%lib{hello}

# Public headers.
#
pub = [dir_path] ../include/

include $pub

pub_hdrs = $($pub/ pub_hdrs)

./ : liba{godot-cpp}: $pub/{$pub_hdrs}

gdextension_dir = [dir_path] $src_root/upstream/gdextension/
gdextension_gen_include_dir = [dir_path] $out_root/gen/include/
gdextension_gen_src_dir = [dir_path] $out_root/gen/src/

# Private headers and sources as well as dependencies.

define [see_through] gen_cxx: group

liba{godot-cpp}: {hxx ixx txx cxx}{** -gen/**} \
                 gen_cxx{godot} \
                 $impl_libs $intf_libs

# Build options.
#
out_pfx_inc = [dir_path] $out_root/include/
src_pfx_inc = [dir_path] $src_root/include/
out_pfx_src = [dir_path] $out_root/src/
src_pfx_src = [dir_path] $src_root/src/

cxx.poptions =+ "-I$out_pfx_src" "-I$src_pfx_src" \
                "-I$out_pfx_inc" "-I$src_pfx_inc" \
                "-I$gdextension_dir" "-I$gdextension_gen_include_dir" "-I$gdextension_gen_src_dir"

{hbmia obja}{*}: cxx.poptions += -DGODOT_CPP_STATIC_BUILD # FIXME: REPLACE THIS OR DELETE IT?

# Export options.
#
liba{godot-cpp}:
{
    cxx.export.poptions = "-I$out_pfx_inc" "-I$src_pfx_inc" "-I$gdextension_dir" "-I$gdextension_gen_include_dir" "-I$gdextension_gen_src_dir"
    cxx.export.libs = $intf_libs
}

liba{godot-cpp}: cxx.export.poptions += -DGODOT_CPP_STATIC # FIXME: REPLACE THIS OR DELETE IT?

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
    liba{godot-cpp}: bin.lib.version = "-$version.project_id"
else
    liba{godot-cpp}: bin.lib.version = "-$version.major.$version.minor"

# Don't install private headers.
#
{hxx ixx txx}{*}: install = false



########################################################################
# Generate Godot C++ Bindings for GDExtension
# See ./upstream/CMakeLists.txt `GENERATED_FILES_LIST` for details

# FIXME: review and fix these scripts... in particular the generation of hxx/cxx not being taken into account as target names/output

gdextension_api_json = [path] $src_root/upstream/gdextension/extension_api.json

file{binding_generator.py}:
{{
    cp $src_root/upstream/binding_generator.py $path($>)
}}

file{print_file_list.py}: file{binding_generator.py}
{{
    diag python $>
    api_json = $regex.replace($gdextension_api_json, "\\\\", "\\\\\\\\")
    gen_dir = $regex.replace($out_root, "\\\\", "\\\\\\\\")
    script = $path($>)

    echo "import binding_generator" > $script
    echo "gdextension_api_json = \"$api_json\"" >> $script
    echo "out_dir = \"$gen_dir\"" >> $script
    echo "binding_generator.print_file_list\(gdextension_api_json, out_dir, headers=True, sources=True\)" >> $script
}}

file{generate_gdextension_cpp_bindings.py}: file{print_file_list.py}
{{
    diag python $>
    api_json=$regex.replace($gdextension_api_json, "\\\\", "\\\\\\\\")
    gen_dir=$regex.replace($out_root, "\\\\", "\\\\\\\\")
    echo "import binding_generator" > $path($>)
    echo "gdextension_api_json = \"$api_json\"" >> $path($>)
    echo "out_dir = \"$gen_dir\"" >> $path($>)

    # FIXME: should be deduced from configuration variables
    echo "arch_bits = \"64\"" >> $path($>)

    # FIXME: should be an option, see GENERATE_BINDING_PARAMETERS in upstream/CMakeLists.txt
    echo "generate_template_bindings = True" >> $path($>)

    # FIXME: should be an option, see FLOAT_PRECISION in upstream/CMakeLists.txt
    echo "float_precision = \"single\"" >> $path($>)

    echo "binding_generator.generate_bindings\(gdextension_api_json, generate_template_bindings, arch_bits, float_precision, out_dir\)" >> $path($>)

}}

gen_cxx{godot} : file{print_file_list.py} file{generate_gdextension_cpp_bindings.py} fsdir{gen}
{{
    gen_files_list_script_path = $path($<[0])
    generator_script_path = $path($<[1])
    temp_dir = $out_root/temp
    gen_files_list_file = $temp_dir/generated_files_list.txt

    # Make sure all generated files are considered output targets
    depdb dyndep --dyn-target --format lines --file $gen_files_list_file -- \
        mkdir -p $temp_dir && \
        python $gen_files_list_script_path | sed -e "s/;/\n/g" > $gen_files_list_file

    diag python $>

    echo "==== Generating GDExtension C++ API files ... \(listed before\) ===="
    python $generator_script_path
    echo "==== Generating GDExtension C++ API files - DONE ===="
}}
